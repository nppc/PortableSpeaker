
AVRASM ver. 2.2.7  C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm Wed May 01 22:37:07 2019

[builtin](2): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\tn85def.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(13): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\tn85def.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(89): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\PWM.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(90): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\ADC.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(91): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\MovAverage.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(92): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\math.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(93): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\scheduler.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(94): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\EEPROM.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(95): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.inc'
[builtin](2): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\tn85def.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(13): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\tn85def.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(89): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\PWM.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(90): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\ADC.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(91): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\MovAverage.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(92): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\math.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(93): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\scheduler.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(94): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\EEPROM.inc'
C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.asm(95): Including file 'C:\src\Tennp\Git\PortableSpeaker\Firmware\Charger\main.inc'
                                 
                                 ; LiIon Charger firmware
                                 
                                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny85.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "tn85def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATtiny85
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATtiny85
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _TN85DEF_INC_
                                 #define _TN85DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATtiny85
                                 #pragma AVRPART ADMIN PART_NAME ATtiny85
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x93
                                 .equ	SIGNATURE_002	= 0x0b
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2
                                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GIMSK	= 0x3b
                                 .equ	GIFR	= 0x3a
                                 .equ	TIMSK	= 0x39
                                 .equ	TIFR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	TCCR0B	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OSCCAL	= 0x31
                                 .equ	TCCR1	= 0x30
                                 .equ	TCNT1	= 0x2f
                                 .equ	OCR1A	= 0x2e
                                 .equ	OCR1C	= 0x2d
                                 .equ	GTCCR	= 0x2c
                                 .equ	OCR1B	= 0x2b
                                 .equ	TCCR0A	= 0x2a
                                 .equ	OCR0A	= 0x29
                                 .equ	OCR0B	= 0x28
                                 .equ	PLLCSR	= 0x27
                                 .equ	CLKPR	= 0x26
                                 .equ	DT1A	= 0x25
                                 .equ	DT1B	= 0x24
                                 .equ	DTPS	= 0x23
                                 .equ	DWDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	PRR	= 0x20
                                 .equ	EEARH	= 0x1f
                                 .equ	EEARL	= 0x1e
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PCMSK	= 0x15
                                 .equ	DIDR0	= 0x14
                                 .equ	GPIOR2	= 0x13
                                 .equ	GPIOR1	= 0x12
                                 .equ	GPIOR0	= 0x11
                                 .equ	USIBR	= 0x10
                                 .equ	USIDR	= 0x0f
                                 .equ	USISR	= 0x0e
                                 .equ	USICR	= 0x0d
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	ADCSRB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Data Register, Port B
                                 .equ	PORTB0	= 0	; 
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; 
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; 
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; 
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; 
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; 
                                 .equ	PB5	= 5	; For compatibility
                                 
                                 ; DDRB - Data Direction Register, Port B
                                 .equ	DDB0	= 0	; 
                                 .equ	DDB1	= 1	; 
                                 .equ	DDB2	= 2	; 
                                 .equ	DDB3	= 3	; 
                                 .equ	DDB4	= 4	; 
                                 .equ	DDB5	= 5	; 
                                 
                                 ; PINB - Input Pins, Port B
                                 .equ	PINB0	= 0	; 
                                 .equ	PINB1	= 1	; 
                                 .equ	PINB2	= 2	; 
                                 .equ	PINB3	= 3	; 
                                 .equ	PINB4	= 4	; 
                                 .equ	PINB5	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	AINBG	= ACBG	; For compatibility
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR0 - 
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	REFS2	= 4	; Reference Selection Bit 2
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	IPR	= 5	; Input Polarity Mode
                                 .equ	BIN	= 7	; Bipolar Input Mode
                                 
                                 ; DIDR0 - Digital Input Disable Register 0
                                 .equ	ADC1D	= 2	; ADC1 Digital input Disable
                                 .equ	ADC3D	= 3	; ADC3 Digital input Disable
                                 .equ	ADC2D	= 4	; ADC2 Digital input Disable
                                 .equ	ADC0D	= 5	; ADC0 Digital input Disable
                                 
                                 
                                 ; ***** USI **************************
                                 ; USIBR - USI Buffer Register
                                 .equ	USIBR0	= 0	; USI Buffer Register bit 0
                                 .equ	USIBR1	= 1	; USI Buffer Register bit 1
                                 .equ	USIBR2	= 2	; USI Buffer Register bit 2
                                 .equ	USIBR3	= 3	; USI Buffer Register bit 3
                                 .equ	USIBR4	= 4	; USI Buffer Register bit 4
                                 .equ	USIBR5	= 5	; USI Buffer Register bit 5
                                 .equ	USIBR6	= 6	; USI Buffer Register bit 6
                                 .equ	USIBR7	= 7	; USI Buffer Register bit 7
                                 
                                 ; USIDR - USI Data Register
                                 .equ	USIDR0	= 0	; USI Data Register bit 0
                                 .equ	USIDR1	= 1	; USI Data Register bit 1
                                 .equ	USIDR2	= 2	; USI Data Register bit 2
                                 .equ	USIDR3	= 3	; USI Data Register bit 3
                                 .equ	USIDR4	= 4	; USI Data Register bit 4
                                 .equ	USIDR5	= 5	; USI Data Register bit 5
                                 .equ	USIDR6	= 6	; USI Data Register bit 6
                                 .equ	USIDR7	= 7	; USI Data Register bit 7
                                 
                                 ; USISR - USI Status Register
                                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                                 .equ	USIDC	= 4	; Data Output Collision
                                 .equ	USIPF	= 5	; Stop Condition Flag
                                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                                 
                                 ; USICR - USI Control Register
                                 .equ	USITC	= 0	; Toggle Clock Port Pin
                                 .equ	USICLK	= 1	; Clock Strobe
                                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                                 
                                 ; GIMSK - General Interrupt Mask Register
                                 .equ	GICR	= GIMSK	; For compatibility
                                 .equ	PCIE	= 5	; Pin Change Interrupt Enable
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 
                                 ; GIFR - General Interrupt Flag register
                                 .equ	PCIF	= 5	; Pin Change Interrupt Flag
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 
                                 ; PCMSK - Pin Change Enable Mask
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask Bit 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask Bit 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask Bit 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask Bit 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask Bit 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask Bit 5
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0B	= 3	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 .equ	OCIE0A	= 4	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0B	= 3	; Timer/Counter0 Output Compare Flag 0B
                                 .equ	OCF0A	= 4	; Timer/Counter0 Output Compare Flag 0A
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 ;.equ	OCR0_0	= 0	; 
                                 ;.equ	OCR0_1	= 1	; 
                                 ;.equ	OCR0_2	= 2	; 
                                 ;.equ	OCR0_3	= 3	; 
                                 ;.equ	OCR0_4	= 4	; 
                                 ;.equ	OCR0_5	= 5	; 
                                 ;.equ	OCR0_6	= 6	; 
                                 ;.equ	OCR0_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSR0	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TCCR1 - Timer/Counter Control Register
                                 .equ	CS10	= 0	; Clock Select Bits
                                 .equ	CS11	= 1	; Clock Select Bits
                                 .equ	CS12	= 2	; Clock Select Bits
                                 .equ	CS13	= 3	; Clock Select Bits
                                 .equ	COM1A0	= 4	; Compare Output Mode, Bit 1
                                 .equ	COM1A1	= 5	; Compare Output Mode, Bit 0
                                 .equ	PWM1A	= 6	; Pulse Width Modulator Enable
                                 .equ	CTC1	= 7	; Clear Timer/Counter on Compare Match
                                 
                                 ; TCNT1 - Timer/Counter Register
                                 .equ	TCNT1_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT1_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT1_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT1_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT1_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT1_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT1_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT1_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR1A - Output Compare Register
                                 .equ	OCR1A0	= 0	; Output Compare Register A Bit 0
                                 .equ	OCR1A1	= 1	; Output Compare Register A Bit 1
                                 .equ	OCR1A2	= 2	; Output Compare Register A Bit 2
                                 .equ	OCR1A3	= 3	; Output Compare Register A Bit 3
                                 .equ	OCR1A4	= 4	; Output Compare Register A Bit 4
                                 .equ	OCR1A5	= 5	; Output Compare Register A Bit 5
                                 .equ	OCR1A6	= 6	; Output Compare Register A Bit 6
                                 .equ	OCR1A7	= 7	; Output Compare Register A Bit 7
                                 
                                 ; OCR1B - Output Compare Register
                                 .equ	OCR1B0	= 0	; Output Compare Register B Bit 0
                                 .equ	OCR1B1	= 1	; Output Compare Register B Bit 1
                                 .equ	OCR1B2	= 2	; Output Compare Register B Bit 2
                                 .equ	OCR1B3	= 3	; Output Compare Register B Bit 3
                                 .equ	OCR1B4	= 4	; Output Compare Register B Bit 4
                                 .equ	OCR1B5	= 5	; Output Compare Register B Bit 5
                                 .equ	OCR1B6	= 6	; Output Compare Register B Bit 6
                                 .equ	OCR1B7	= 7	; Output Compare Register B Bit 7
                                 
                                 ; OCR1C - Output compare register
                                 .equ	OCR1C0	= 0	; 
                                 .equ	OCR1C1	= 1	; 
                                 .equ	OCR1C2	= 2	; 
                                 .equ	OCR1C3	= 3	; 
                                 .equ	OCR1C4	= 4	; 
                                 .equ	OCR1C5	= 5	; 
                                 .equ	OCR1C6	= 6	; 
                                 .equ	OCR1C7	= 7	; 
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 5	; OCIE1A: Timer/Counter1 Output Compare B Interrupt Enable
                                 .equ	OCIE1A	= 6	; OCIE1A: Timer/Counter1 Output Compare Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 5	; Timer/Counter1 Output Compare Flag 1B
                                 .equ	OCF1A	= 6	; Timer/Counter1 Output Compare Flag 1A
                                 
                                 ; GTCCR - Timer counter control register
                                 .equ	PSR1	= 1	; Prescaler Reset Timer/Counter1
                                 .equ	FOC1A	= 2	; Force Output Compare 1A
                                 .equ	FOC1B	= 3	; Force Output Compare Match 1B
                                 .equ	COM1B0	= 4	; Comparator B Output Mode
                                 .equ	COM1B1	= 5	; Comparator B Output Mode
                                 .equ	PWM1B	= 6	; Pulse Width Modulator B Enable
                                 
                                 ; DTPS - Dead time prescaler register
                                 .equ	DTPS0	= 0	; 
                                 .equ	DTPS1	= 1	; 
                                 
                                 ; DT1A - Dead time value register
                                 .equ	DTVL0	= 0	; 
                                 .equ	DTVL1	= 1	; 
                                 .equ	DTVL2	= 2	; 
                                 .equ	DTVL3	= 3	; 
                                 .equ	DTVH0	= 4	; 
                                 .equ	DTVH1	= 5	; 
                                 .equ	DTVH2	= 6	; 
                                 .equ	DTVH3	= 7	; 
                                 
                                 ; DT1B - Dead time value B
                                 ;.equ	DTVL0	= 0	; 
                                 ;.equ	DTVL1	= 1	; 
                                 ;.equ	DTVL2	= 2	; 
                                 ;.equ	DTVL3	= 3	; 
                                 ;.equ	DTVH0	= 4	; 
                                 ;.equ	DTVH1	= 5	; 
                                 ;.equ	DTVH2	= 6	; 
                                 ;.equ	DTVH3	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	RFLB	= 3	; Read fuse and lock bits
                                 .equ	CTPB	= 4	; Clear temporary page buffer
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 bit 0
                                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 bit 1
                                 .equ	SM0	= 3	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 4	; Sleep Mode Select Bit 1
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	PUD	= 6	; Pull-up Disable
                                 
                                 ; MCUSR - MCU Status register
                                 .equ	PORF	= 0	; Power-On Reset Flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSI	= 1	; Power Reduction USI
                                 .equ	PRTIM0	= 2	; Power Reduction Timer/Counter0
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 
                                 ; OSCCAL - Oscillator Calibration Register
                                 .equ	CAL0	= 0	; Oscillatro Calibration Value Bit 0
                                 .equ	CAL1	= 1	; Oscillatro Calibration Value Bit 1
                                 .equ	CAL2	= 2	; Oscillatro Calibration Value Bit 2
                                 .equ	CAL3	= 3	; Oscillatro Calibration Value Bit 3
                                 .equ	CAL4	= 4	; Oscillatro Calibration Value Bit 4
                                 .equ	CAL5	= 5	; Oscillatro Calibration Value Bit 5
                                 .equ	CAL6	= 6	; Oscillatro Calibration Value Bit 6
                                 .equ	CAL7	= 7	; Oscillatro Calibration Value Bit 7
                                 
                                 ; PLLCSR - PLL Control and status register
                                 .equ	PLOCK	= 0	; PLL Lock detector
                                 .equ	PLLE	= 1	; PLL Enable
                                 .equ	PCKE	= 2	; PCK Enable
                                 .equ	LSM	= 7	; Low speed mode
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; DWDR - debugWire data register
                                 .equ	DWDR0	= 0	; 
                                 .equ	DWDR1	= 1	; 
                                 .equ	DWDR2	= 2	; 
                                 .equ	DWDR3	= 3	; 
                                 .equ	DWDR4	= 4	; 
                                 .equ	DWDR5	= 5	; 
                                 .equ	DWDR6	= 6	; 
                                 .equ	DWDR7	= 7	; 
                                 
                                 ; GPIOR2 - General Purpose IO register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General purpose register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lockbit
                                 .equ	LB2	= 1	; Lockbit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock source
                                 .equ	CKSEL1	= 1	; Select Clock source
                                 .equ	CKSEL2	= 2	; Select Clock source
                                 .equ	CKSEL3	= 3	; Select Clock source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock Output Enable
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through the Chip Erase
                                 .equ	WDTON	= 4	; Watchdog Timer always on
                                 .equ	SPIEN	= 5	; Enable Serial Program and Data Downloading
                                 .equ	DWEN	= 6	; DebugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External Reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	SELFPRGEN	= 0	; Self-Programming Enable
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x0fff	; Note: Word address
                                 .equ	IOEND	= 0x003f
                                 .equ	SRAM_START	= 0x0060
                                 .equ	SRAM_SIZE	= 512
                                 .equ	RAMEND	= 0x025f
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x01ff
                                 .equ	EEPROMEND	= 0x01ff
                                 .equ	EEADRBITS	= 9
                                 #pragma AVRPART MEMORY PROG_FLASH 8192
                                 #pragma AVRPART MEMORY EEPROM 512
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 512
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x0
                                 .equ	NRWW_STOP_ADDR	= 0xfff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x0
                                 .equ	PAGESIZE	= 32
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0001	; External Interrupt 0
                                 .equ	PCI0addr	= 0x0002	; Pin change Interrupt Request 0
                                 .equ	OC1Aaddr	= 0x0003	; Timer/Counter1 Compare Match 1A
                                 .equ	OVF1addr	= 0x0004	; Timer/Counter1 Overflow
                                 .equ	OVF0addr	= 0x0005	; Timer/Counter0 Overflow
                                 .equ	ERDYaddr	= 0x0006	; EEPROM Ready
                                 .equ	ACIaddr	= 0x0007	; Analog comparator
                                 .equ	ADCCaddr	= 0x0008	; ADC Conversion ready
                                 .equ	OC1Baddr	= 0x0009	; Timer/Counter1 Compare Match B
                                 .equ	OC0Aaddr	= 0x000a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x000b	; Timer/Counter0 Compare Match B
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out
                                 .equ	USI_STARTaddr	= 0x000d	; USI START
                                 .equ	USI_OVFaddr	= 0x000e	; USI Overflow
                                 
                                 .equ	INT_VECTORS_SIZE	= 15	; size in words
                                 
                                 #endif  /* _TN85DEF_INC_ */
                                 
                                 
                                 ; based on UDCBuckHW.asm
                                 ;
                                 ; Author : Pavel
                                 ;
                                 
                                 ;#define DEBUG
                                 
                                 #define	MOVINGAVERAGE ; comment it if not needed
                                 .EQU	MOVINGAVERAGE_N = 5 ; can be 3, 5 or 7.
                                 
                                 
                                 .include "tn85def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:04 ******* Source: ATtiny85.xml ************
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "tn85def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATtiny85
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATtiny85
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _TN85DEF_INC_
                                 #endif  /* _TN85DEF_INC_ */
                                 
                                 
                                 ; Pins assignment
                                 ;.EQU	PIN_SDA		= PB0	; I2C_SDA
                                 .EQU	PIN_PWM		= PB1	; PWM to Buck mosfet driver
                                 ;.EQU	PIN_SCL		= PB2	; I2C_SCL
                                 .EQU	PIN_Isense	= PB3	; Current measurement (analog signal)
                                 .EQU	PIN_Vsense	= PB4	; Voltage measurement (analog signal)
                                 
                                 
                                 ; variables assignment
                                 .def	z0			=	r0
                                 .def	z1			=	r1
                                 .def	r_sreg		=	r2	; Store SREG register in interrupts
                                 .def	tmp			=	r16
                                 .def	tmp1		=	r17
                                 .def	tmp2		=	r3
                                 .def	tmp3		=	r4
                                 .def	tmp4		=	r5
                                 .def	itmp		=	r18	; variables to use in interrupts
                                 .def	itmp1		=	r19	; variables to use in interrupts
                                 .def	itmp2		=	r6	; variables to use in interrupts
                                 .def	itmp3		=	r7	; variables to use in interrupts
                                 .def	tmpL1		=	r8	; temp register for 16 bit calculations
                                 .def	tmpH1		=	r9	; temp register for 16 bit calculations
                                 .def	tmpL2		=	r10	; temp register for 16 bit calculations
                                 .def	tmpH2		=	r11	; temp register for 16 bit calculations
                                 ;.def	USIstate	=	r20	; state of I2C protocol
                                 .def	ADC_counter	=	r21	; Flags for ADC. Refer to ADC.inc for details
                                 .def	setVolt_tmp	=	r12	; For smooth change of preset voltage
                                 .def	V_chg_const	=	r13	; Converted value for timer0 from Voltage_Change SRAM
                                 .def	Voltage_Set	=	r22	; Voltage for Buck output (V*10)
                                 .def	SchedulerCnt=	r14	; Counter for scheduler
                                 .def	PWM_flags	=	r23	; Flags for generating PWM 
                                 ; YH:YL are used in USI interrupt as a pointer to the SRAM buffer
                                 ; ZH:ZL for general use in main loop
                                 .DSEG
                                 .ORG SRAM_START
                                 ;USI_dataBuffer:				.BYTE USI_DATALEN	; USI bytes buffer
                                 ;USI_buffer_updateStatus:	.BYTE 1	; 1 - Buffer updated with new data, 0 - data is read by main loop
                                 ; Variables (R/W)
000060                           Voltage_Change:				.BYTE 1 ; (V*10). Before using this variable, we need to convert it for timer0 counter
000061                           Voltage_Min:				.BYTE 1 ; (V*10)
000062                           Voltage_Max:				.BYTE 1 ; (V*10)
                                 ; Variables (R)
000063                           Voltage_Measured:			.BYTE 2 ; (V*100)
000065                           Current_Measured:			.BYTE 1 ; (C*10)
000066                           ADC_Current_zero_RAW:		.BYTE 2	; ADC value when no load (0.0A)
                                 #ifdef MOVINGAVERAGE
000068                           M_AVERAGE_voltage_COUNTER:	.BYTE 1	 ; Counter in the table
000069                           M_AVERAGE_voltage_TABLE:	.BYTE MOVINGAVERAGE_N * 2 ; Table for running moving average algorithm (max 14 bytes).
000073                           M_AVERAGE_current_COUNTER:	.BYTE 1	 ; Counter in the table
000074                           M_AVERAGE_current_TABLE:	.BYTE MOVINGAVERAGE_N * 2 ; Table for running moving average algorithm (max 14 bytes).
                                 #endif
                                 
                                 .CSEG
                                 .ORG 0
                                 
                                 	; Interrupt vectors
000000 c175                      	rjmp RESET ; Reset Handler
000001 9518                      	reti	;rjmp EXT_INT0 ; IRQ0 Handler
000002 9518                      	reti	;PCINT0 External Interrupt Request 1
000003 9518                      	reti	;TIMER1 COMPA Timer/Counter1 Compare Match A
000004 9518                      	reti	;TIMER1 OVF Timer/Counter1 Overflow
000005 9518                      	reti	;TIMER0 OVF Timer/Counter0 Overflow
000006 9518                      	reti	;EE_RDY EEPROM Ready
000007 9518                      	reti	;ANA_COMP Analog Comparator
000008 9518                      	reti	;ADC_INT ;ADC Conversion Complete
000009 9518                      	reti	;TIMER1 COMPB Timer/Counter1 Compare Match B
00000a c0b2                      	rjmp TMR0_COMPA ; Timer/Counter0 Compare Match A
00000b 9518                      	reti	;TIMER0 COMPB Timer/Counter0 Compare Match B
00000c 9518                      	reti	;WDT
00000d 9518                      	reti	;rjmp USI_start	; USI start
00000e 9518                      	reti	;rjmp USI_ovf	; USI Overflow
                                 
                                 	
                                 .include "PWM.inc"
                                 
                                 ; 250 Khz
                                 init_PWM:
00000f 98c1                      	cbi PORTB, PIN_PWM		; after reset it will be LOW,( but still, let's force it to LOW.
000010 9ab9                      	sbi DDRB, PIN_PWM		; output
000011 bc0f                      	out TCNT1, z0
000012 bc0e                      	out OCR1A, z0			; no PWM
000013 2777                      	clr PWM_flags
000014 e601                      	ldi tmp, (0<<CS13) | (0<<CS12) | (0<<CS11) | (1<<CS10) | (1<<PWM1A) | (1<<COM1A1) | (0<<COM1A0)	; prescaller 1; fast PWM on OC1A
000015 bf00                      	out TCCR1, tmp	
                                 	; Enable 64mhz
000016 e002                      	ldi tmp, (1<<PLLE)
000017 bd07                      	out PLLCSR, tmp
                                 	; wait until clock stabilize (about 100us)
                                 waitPLL:
000018 b507                      	in tmp, PLLCSR
000019 ff00                      	sbrs tmp, PLOCK
00001a cffd                      	rjmp waitPLL
00001b e006                      	ldi tmp, (1<<PCKE) | (1<<PLLE)
00001c bd07                      	out PLLCSR, tmp
                                 .include "ADC.inc"
00001d 9508                      
                                 ; We measure first 8 samples of V.
                                 ; Then measure 1 sample of I.
                                 ; So, I will be measured 8 times slower than V.
                                 ;
                                 ; ADC_counter:
                                 ;  0 - skip ADC reading
                                 ;  1-8 - Read Voltage
                                 ;  8 - after reading, change ADC channel to I
                                 ;  9 - skip ADC reading
                                 ;  10 - Read Current
                                 ;  10 - after reading, change ADC channel to V and reset counter
                                 
                                 .EQU 	VSENSE_ADC = (0<<MUX3) | (0<<MUX2) | (1<<MUX1) | (0<<MUX0) ; ADC2 (PB4) 
                                 .EQU 	ISENSE_ADC = (0<<MUX3) | (0<<MUX2) | (1<<MUX1) | (1<<MUX0) ; ADC3 (PB3)
                                 ;.EQU 	INTTEMP_ADC = (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0) ; ADC4 (Internal temperature sensor)
                                 
                                 .EQU	VOLT_DIV_CONST		= 23		; To get this number use formula (for 28.50v max): 
                                 										; VREF=5v 
                                 										; 4095/(Vmax*10)*8, where Vmax=(R1+R2)*VREF/R2
                                 										; and resistor values is from divider (47K/10K)
                                 										; Vmax=(47+10)*VREF/10=28.5
                                 										; 4095*2/(28.5*100)*8=22.99
                                 										; And then voltage will be calculated as ADC * 64 / VOLT_DIV_CONST
                                 
                                 .EQU	CURRENT_DIV_CONST	= 242		; To get this number use formula (for 185mV/A sensor): 
                                 										; VREF=5v 
                                 										; MULCOEFF=VREF*1000/185/1023*10
                                 										; 1/MULCOEFF*64=242
                                 										; And then current will be calculated as (ADC-ADC_Current_zero_RAW)*64/CURRENT_DIV_CONST
                                 										
                                 
                                 ADC_Read:
00001e b034                      	in tmp2, ADCL
00001f b045                      	in tmp3, ADCH
000020 3058                      	cpi ADC_counter, 8	; check counter
000021 f419                      	brne ADC_skp_change_1
                                 	; Change channel to I
000022 e003                      	ldi tmp, ISENSE_ADC
000023 b907                      	out ADMUX, tmp
000024 c004                      	rjmp ADC_skp_change_2
                                 ADC_skp_change_1:
000025 305a                      	cpi ADC_counter, 10	; check counter
000026 f411                      	brne ADC_skp_change_2
                                 	; Change channel to V
000027 e002                      	ldi tmp, VSENSE_ADC
000028 b907                      	out ADMUX, tmp
                                 ADC_skp_change_2:
                                 	; start new ADC reading
000029 9a36                      	sbi ADCSRA, ADSC
                                 	; continue to analyze counter
00002a 3050                      	cpi ADC_counter, 0	; skip reading
00002b f031                      	breq adc_exit
00002c 3059                      	cpi ADC_counter, 9	; 1-8
00002d f030                      	brlo ADC_read_Volt
00002e 3059                      	cpi ADC_counter, 9 ; skip reading
00002f f011                      	breq adc_exit
000030 305a                      	cpi ADC_counter, 10 
000031 f021                      	breq ADC_read_Current
                                 
                                 adc_exit:
000032 9553                      	inc ADC_counter	; increment counter
000033 9508                      	ret
                                 ADC_read_Volt:
000034 d102                      	rcall Convert_VoltageADC_to_Volt
000035 cffc                      	rjmp adc_exit
                                 ADC_read_Current:
000036 d113                      	rcall Convert_CurrentADC_to_Current
                                 	; also reset counter
000037 ef5f                      	ldi ADC_counter, 255	; Before exit counter will became 0.
000038 cff9                      	rjmp adc_exit
                                 
                                 
                                 init_ADC:
000039 94f8                      	cli	; just in case
                                 	; Initialize remaining pins
                                 	#ifndef DEBUG	; disable digital logic only in "prodution"
00003a e108                      		ldi tmp, (1<<PIN_Vsense) | (1<<PIN_Isense)
00003b bb04                      		out DIDR0, tmp		; disable digital logic
                                 	#endif
00003c 98bc                      	cbi DDRB, PIN_Vsense	; input
00003d 98bb                      	cbi DDRB, PIN_Isense	; input
                                 	; Initialize ADC variables
00003e 2755                      	clr ADC_counter
                                 	; set 125khz clock for ADC (8mhz/64)m interrupt
00003f e806                      	ldi tmp, (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0) | (0<<ADIE) | (1<<ADEN)	; no interrupts
000040 b906                      	out ADCSRA, tmp
                                 	; configure channel 
                                 	; voltage reference by default is VCC
000041 e003                      	ldi tmp, ISENSE_ADC
000042 b907                      	out ADMUX, tmp
                                 	#ifdef MOVINGAVERAGE
                                 		; fill M_average array for I
000043 e7e3                      		ldi ZL, LOW(M_AVERAGE_current_COUNTER)
000044 e0f0                      		ldi ZH, HIGH(M_AVERAGE_current_COUNTER)
000045 d00b                      		rcall init_ADC_array
                                 	#else
                                 	#endif
                                 	; store last value to get reference for Current measurement (0.0A)
000046 9230 0066                 	sts ADC_Current_zero_RAW, tmp2
000048 9240 0067                 	sts ADC_Current_zero_RAW+1, tmp3
                                 
00004a e002                      	ldi tmp, VSENSE_ADC
00004b b907                      	out ADMUX, tmp
                                 	#ifdef MOVINGAVERAGE
                                 		; fill M_average array for V
00004c e6e8                      		ldi ZL, LOW(M_AVERAGE_voltage_COUNTER)
00004d e0f0                      		ldi ZH, HIGH(M_AVERAGE_voltage_COUNTER)
00004e d002                      		rcall init_ADC_array
                                 		; now V channel is selected
                                 	#endif
                                 	; clear ADC interrupt flag
00004f 9a34                      	sbi ADCSRA, ADIF
                                 	; no sense to store voltage now
                                 	;sts ADC_Voltage_RAW, itmp2
                                 	;sts ADC_Voltage_RAW+1, itmp3
000050 9508                      	ret
                                 
                                 #ifdef MOVINGAVERAGE
                                 init_ADC_array:
000051 e00a                      	ldi tmp, MOVINGAVERAGE_N * 2
                                 init_ADC_loop:
000052 930f                      	push tmp
000053 93ef                      	push ZL
000054 93ff                      	push ZH
                                 	; start first conversion
000055 9a36                      	sbi ADCSRA, ADSC
                                 	; wait for result
                                 waitforADC:
000056 9936                      	sbic ADCSRA, ADSC
000057 cffe                      	rjmp waitforADC
                                 	; read ADC
000058 b034                      	in tmp2, ADCL
000059 b045                      	in tmp3, ADCH
00005a d00c                      	rcall moving_average	; fill array
00005b 91ff                      	pop ZH
00005c 91ef                      	pop ZL
00005d 910f                      	pop tmp
00005e 950a                      	dec tmp
00005f f791                      	brne init_ADC_loop
000060 9508                      	ret
                                 #endif
                                 .include "MovAverage.inc"
                                 
                                 
                                 ; while Mov Average init interrupts should be disabled
                                 init_Moving_Average:
000061 94f8                      	cli	; just in case
000062 9200 0068                 	sts M_AVERAGE_voltage_COUNTER, z0
000064 9200 0073                 	sts M_AVERAGE_current_COUNTER, z0
000066 9508                      	ret
                                 
                                 
                                 ; smooth data via moving average algorithm
                                 ; store/read 10 bit value to the Moving Average array
                                 ; value is in tmp2:tmp3 
                                 ; Z points to the array of data (Counter and averaging data)
                                 moving_average:
                                 	; we will run average within MOVINGAVERAGE_N values.
                                 	; pointer for moving average table
000067 93ef                      	push ZL	; store for future use
000068 93ff                      	push ZH	; store for future use
000069 9101                      	ld tmp, Z+
00006a 2f10                      	mov tmp1, tmp
00006b 0f11                      	lsl tmp1	; multiply by 2 because we operate with 16 bit values
00006c 0fe1                      	add ZL, tmp1
00006d 1df0                      	adc ZH, z0
                                 	; store current value in the table
00006e 9231                      	st Z+, tmp2
00006f 8240                      	st Z, tmp3
                                 	; update counter
000070 9503                      	inc tmp
000071 3005                      	cpi tmp, MOVINGAVERAGE_N
000072 f409                      	brne mov_avrg_skp
000073 2700                      	clr tmp
                                 mov_avrg_skp:
000074 91ff                      	pop ZH
000075 91ef                      	pop ZL
000076 9301                      	st Z+, tmp	; Store counter
                                 	; sum all values in the table
                                 	; Z points to the first element in the table
000077 e005                      	ldi tmp, MOVINGAVERAGE_N
000078 2488                      	clr tmpL1
000079 2499                      	clr tmpH1
                                 mov_avrg_loop:
00007a 9031                      	ld tmp2, Z+
00007b 9041                      	ld tmp3, Z+
00007c 0c83                      	add tmpL1, tmp2
00007d 1c94                      	adc tmpH1, tmp3
00007e 950a                      	dec tmp
00007f f7d1                      	brne mov_avrg_loop
                                 	; divide result by MOVINGAVERAGE_N
000080 e005                      	ldi tmp, MOVINGAVERAGE_N
000081 2ea0                      	mov tmpL2, tmp
000082 24bb                      	clr tmpH2
000083 d003                      	rcall div16u
                                 	; new result store back to tmp2:tmp3
000084 2c38                      	mov tmp2, tmpL1
000085 2c49                      	mov tmp3, tmpH1
000086 9508                      	ret
                                 
                                 #endif	
                                 .include "math.inc"
                                 
                                 ;*
                                 ;* "div16u" - 16/16 Bit Unsigned Division
                                 ;*
                                 ;* This subroutine divides the two 16-bit numbers 
                                 ;* "tmpH1:tmpL1" (dividend) and "tmpH2:tmpL2" (divisor). 
                                 ;* The result is placed in "tmpH1:tmpL1" and the remainder in
                                 ;* "tmp3:tmp2".
                                 ;*  
                                 ;* Number of words	:19+reminder routine (7)
                                 ;* Number of cycles	:235/251 (Min/Max)
                                 ;* Low registers used	:6 (tmpL1,tmpH1,tmpL2,tmpH2,tmp2,tmp3)
                                 ;* High registers used  :1 (tmp)
                                 ;*
                                 ;***************************************************************************
                                 ; about 25us at 9.6mhz
000087 2433                      div16u:	clr	tmp2	;clear remainder Low byte
000088 1844                      	sub	tmp3,tmp3;clear remainder High byte and carry
000089 e101                      	ldi	tmp,17	;init loop counter
00008a 1c88                      d16u_1:	rol	tmpL1		;shift left dividend
00008b 1c99                      	rol	tmpH1
00008c 950a                      	dec	tmp		;decrement counter
00008d f441                      	brne	d16u_2		;if done
                                 	; take care of reminder (we want to have coeff as precise as possible)
                                 	;divide divisor by 2
00008e 94b6                      	lsr tmpH2
00008f 94a7                      	ror tmpL2
                                 	; compare reminder to half of divisor
000090 143a                      	cp  tmp2, tmpL2 
000091 044b                      	cpc	tmp3, tmpH2
000092 f010                      	brlo d16u_exit
                                 	; increment result
000093 0c81                      	add tmpL1, z1
000094 1c90                      	adc tmpH1, z0
                                 d16u_exit:
000095 9508                      	ret			;    return
000096 1c33                      d16u_2:	rol	tmp2	;shift dividend into remainder
000097 1c44                      	rol	tmp3
000098 183a                      	sub	tmp2,tmpL2	;remainder = remainder - divisor
000099 084b                      	sbc	tmp3,tmpH2	;
00009a f420                      	brcc	d16u_3		;if result negative
00009b 0c3a                      	add	tmp2,tmpL2	;    restore remainder
00009c 1c4b                      	adc	tmp3,tmpH2
00009d 9488                      	clc			;    clear carry to be shifted into result
00009e cfeb                      	rjmp	d16u_1		;else
00009f 9408                      d16u_3:	sec			;    set carry to be shifted into result
                                 .include "scheduler.inc"
0000a0 cfe9                      
                                 ; At 8Mhz divider is 1/64 and overflow value is 125 (OCR0A).
                                 init_Scheduler:
                                 	; Halt the timer
0000a1 e801                      	ldi tmp, (1<<TSM) | (1<<PSR0)
0000a2 bd0c                      	out GTCCR, tmp		; we don't care about timer1 as GTCCR is not used there
                                 	; Configure timer in CTC mode and prescaller
0000a3 e002                      	ldi tmp, (1<<WGM01) | (0<<WGM00)
0000a4 bd0a                      	out TCCR0A, tmp
0000a5 e003                      	ldi tmp, (0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00)
0000a6 bf03                      	out TCCR0B, tmp
0000a7 be02                      	out TCNT0, z0
                                 	; Set top value to match 1ms.
0000a8 e70d                      	ldi tmp, 125
0000a9 bd09                      	out OCR0A, tmp
                                 	; Enable interrupt 
0000aa e100                      	ldi tmp, (1<<OCIE0A)
0000ab bf09                      	out TIMSK, tmp		; we don't care about timer1 interrupts as we don't use them. 
                                 	
0000ac 24cc                      	clr setVolt_tmp		; At the beginning voltage is 0.
0000ad 9508                      	ret
                                 	
                                 ; The value transmitted via I2C and stored in EEPROM is human readable value ((V*10)/S)
                                 ; But we need to convert it for timer0 use
                                 Scheduler_convert_changeValue:
                                 	; formula is: (1000/1ms)/Value
0000ae e003                      	ldi tmp, HIGH(1000)
0000af 2e90                      	mov tmpH1, tmp
0000b0 ee08                      	ldi tmp, LOW(1000)
0000b1 2e80                      	mov tmpL1, tmp
0000b2 24bb                      	clr tmpH2
0000b3 90a0 0060                 	lds tmpL2, Voltage_Change
0000b5 dfd1                      	rcall div16u
0000b6 2cd8                      	mov V_chg_const, tmpL1
0000b7 9508                      	ret
                                 
                                 	
                                 Scheduler_start:
0000b8 dff5                      	rcall Scheduler_convert_changeValue
0000b9 2ced                      	mov SchedulerCnt, V_chg_const
                                 	; start timer when everything else configured and ready
0000ba e000                      	ldi tmp, (0<<TSM)
0000bb bd0c                      	out GTCCR, tmp		; we don't care about timer1 as GTCCR is not used there
0000bc 9508                      	ret
                                 	
                                 ; interrupt for timer0 counting (every 1ms)
                                 TMR0_COMPA:
                                 	; most of the time only these 6 instructions will run
0000bd b62f                      	in r_sreg, SREG
0000be 6870                      	sbr PWM_flags, (1<<PWM_flag_regulatePWM)	; We adjust PWM every 1ms.
0000bf 94ea                      	dec SchedulerCnt
0000c0 f011                      	breq TMR0_changeVolt
0000c1 be2f                      	out SREG, r_sreg
0000c2 9518                      	reti
                                 TMR0_changeVolt:
0000c3 2ced                      	mov SchedulerCnt, V_chg_const	; rewind counter
                                 	; compare setVolt_tmp to Voltage_Set
                                 	; if not equal, then adjust setVolt_tmp to be closer to Voltage_Set
0000c4 116c                      	cpse Voltage_Set, setVolt_tmp
0000c5 c002                      	rjmp TMR0_changeVolt_adjust
0000c6 be2f                      	out SREG, r_sreg
0000c7 9518                      	reti
                                 TMR0_changeVolt_adjust:
0000c8 16c6                      	cp setVolt_tmp, Voltage_Set
0000c9 f018                      	brlo TMR0_changeVolt_adjust_inc
0000ca 94ca                      	dec setVolt_tmp
0000cb be2f                      	out SREG, r_sreg
0000cc 9518                      	reti
                                 TMR0_changeVolt_adjust_inc:
0000cd 94c3                      	inc setVolt_tmp
0000ce be2f                      	out SREG, r_sreg
0000cf 9518                      	reti
                                 
                                 .include "EEPROM.inc"
                                 
                                 .EQU EEPROM_STARTADDR = 5 ; it is not good to start from first byte as it can be corrupted 
                                 
                                 .ESEG
                                 .ORG EEPROM_STARTADDR
000005 01                        EEPROM_Voltage_Change:		.DB 1
000006 01                        EEPROM_Voltage_Min:			.DB 1
000007 01                        EEPROM_Voltage_Max:			.DB 1
000008 01                        EEPROM_CRC8:				.DB 1	; This is CRC byte
                                 
                                 .CSEG
                                 ; reuse variables tmpL2 and tmpH2 for data and address
                                 
                                 ; Store Settings to EEPROM
                                 ; Store only changed bytes
                                 EEPROM_StoreSettings:
0000d0 e005                      	ldi tmp, EEPROM_STARTADDR
0000d1 2eb0                      	mov tmpH2, tmp	; reuse this variable for EEPROM address
                                 	; 1st byte
0000d2 9100 0060                 	lds tmp, Voltage_Change
0000d4 d00f                      	rcall ee_check_byte
                                 	; 2nd byte
0000d5 9100 0061                 	lds tmp, Voltage_Min
0000d7 d00c                      	rcall ee_check_byte
                                 	; 3nd byte
0000d8 9100 0062                 	lds tmp, Voltage_Max
0000da d009                      	rcall ee_check_byte
                                 	; calculate and store (if needed CRC value)
0000db d030                      	rcall crc_calc
0000dc 1100                      	cpse tmp, z0
0000dd 9508                      	ret			; exit if no update needed
0000de 94ba                      	dec tmpH2	; set address back to correct eeprom location for CRC
0000df 2ca3                      	mov tmpL2, tmp2
0000e0 94f8                      	cli
0000e1 d04a                      	rcall EEPROM_write	; Write CRC
0000e2 9478                      	sei
0000e3 9508                      	ret
                                 ee_check_byte:
0000e4 d03f                      	rcall EEPROM_read
0000e5 16a0                      	cp tmpL2, tmp
0000e6 f029                      	breq ee_bt_ok
0000e7 94ba                      	dec tmpH2		; back to correct address
0000e8 2d0a                      	mov tmp, tmpL2
0000e9 94f8                      	cli
0000ea d041                      	rcall EEPROM_write
0000eb 9478                      	sei
                                 ee_bt_ok:	
0000ec 9508                      	ret
                                 
                                 ; Restore data from EEPROM.
                                 ; Restore Factory settings if EEPROM is corrupted
                                 EEPROM_restoreSettings:
0000ed d01e                      	rcall crc_calc
0000ee 1101                      	cpse tmp, z1
0000ef d00c                      	rcall EEPROM_FactoryReset
                                 	; EEPROM is ok - read the data
0000f0 e005                      	ldi tmp, EEPROM_STARTADDR
0000f1 2eb0                      	mov tmpH2, tmp	; reuse this variable for EEPROM address
0000f2 d031                      	rcall EEPROM_read	; read byte to tmpL2. Address is incremented
0000f3 92a0 0060                 	sts Voltage_Change, tmpL2
0000f5 d02e                      	rcall EEPROM_read	; read byte to tmpL2. Address is incremented
0000f6 92a0 0061                 	sts Voltage_Min, tmpL2
0000f8 d02b                      	rcall EEPROM_read	; read byte to tmpL2. Address is incremented
0000f9 92a0 0062                 	sts Voltage_Max, tmpL2
0000fb 9508                      	ret
                                 
                                 ; This routine is called at startup, so interrupts are off.
                                 EEPROM_FactoryReset:
0000fc e005                      	ldi tmp, EEPROM_STARTADDR
0000fd 2eb0                      	mov tmpH2, tmp	; reuse this variable for EEPROM address
0000fe e005                      	ldi tmp, 5	; Voltage change. 5 means 0.5V/S
0000ff 2ea0                      	mov tmpL2, tmp
000100 d02b                      	rcall EEPROM_write
000101 e00a                      	ldi tmp, 10		; Voltage min. 10 means 1V
000102 2ea0                      	mov tmpL2, tmp
000103 d028                      	rcall EEPROM_write
000104 e708                      	ldi tmp, 120	; Voltage max. 120 means 12V
000105 2ea0                      	mov tmpL2, tmp
000106 d025                      	rcall EEPROM_write
                                 	; calculate CRC
000107 d004                      	rcall crc_calc
000108 94ba                      	dec tmpH2	; set address back to correct eeprom location for CRC
000109 2ca3                      	mov tmpL2, tmp2
00010a d021                      	rcall EEPROM_write	; Write CRC
00010b 9508                      	ret
                                 
                                 ;INPUT: -
                                 ;OUTPUT: tmp=1 - EEPROM ok, tmp=0 - EEPROM corrupted
                                 ; we are safe here to use T flag as it will be not corrupted in I2C routine (SREG is preserved)
                                 crc_calc:
00010c e005                      	ldi tmp, EEPROM_STARTADDR
00010d 2eb0                      	mov tmpH2, tmp	; reuse this variable for EEPROM address
00010e e003                      	ldi tmp, EEPROM_DATALEN
00010f 2e40                      	mov tmp3, tmp	; len of the data
000110 e80c                      	ldi	tmp,0x8C	; polynom
000111 2433                      	clr	tmp2		; CRC value
                                 crc8b:
000112 d011                      	rcall EEPROM_read	; read byte to tmpL2. Address is incremented
000113 e018                      	ldi	tmp1,8	; bits counter
                                 crc01:
000114 243a                      	eor	tmp2,tmpL2
000115 fa30                      	bst	tmp2,0
000116 243a                      	eor	tmp2,tmpL2
000117 94a6                      	lsr	tmpL2
000118 9436                      	lsr	tmp2
000119 f40e                      	brtc crc02
00011a 2630                      	eor	tmp2,tmp
                                 crc02:
00011b 951a                      	dec	tmp1
00011c f7b9                      	brne crc01
00011d 944a                      	dec	tmp3
00011e f799                      	brne crc8b
                                 	; tmp2 contains CRC value, compare it to the next EEPROM byte
00011f e001                      	ldi tmp, 1 ; assume data is not corrupted
000120 d003                      	rcall EEPROM_read	; read CRC byte
000121 103a                      	cpse tmp2, tmpL2
000122 2700                      	clr tmp		; if data is corrupted - clear flag
000123 9508                      	ret
                                 	
                                 
                                 ; tmpH2 - address
                                 ; tmpL2 - data
                                 EEPROM_read:
000124 99e1                      	sbic EECR, EEPE	; wait for prev write
000125 cffe                      	rjmp EEPROM_read
000126 ba0f                      	out EEARH, z0	; we will never use more than 256 bytes of EEPROM
000127 babe                      	out EEARL, tmpH2
000128 9ae0                      	sbi EECR, EERE	; start read operation
000129 b2ad                      	in tmpL2, EEDR
00012a 94b3                      	inc tmpH2			; next byte address
00012b 9508                      	ret
                                 	
                                 ; tmpH2 - address
                                 ; tmpL2 - data
                                 ; every time, when calling this function, make sure interrupts are off.
                                 EEPROM_write:
00012c 99e1                      	sbic EECR,EEPE ; Wait for completion of previous write
00012d cffe                      	rjmp EEPROM_write 
                                 	; Set Programming mode
                                 	;ldi tmp, (0<<EEPM1) | (0<<EEPM0)
                                 	;out EECR, tmp
00012e 98e5                      	cbi EECR, EEPM1
00012f 98e4                      	cbi EECR, EEPM0
                                 	; Set up address (r18:r17) in address register
000130 ba0f                      	out EEARH, z0
000131 babe                      	out EEARL, tmpH2
000132 baad                      	out EEDR, tmpL2
                                 	; Start eeprom write
000133 9ae2                      	sbi EECR,EEMPE
000134 9ae1                      	sbi EECR,EEPE
000135 94b3                      	inc tmpH2			; next byte address
000136 9508                      	ret
                                 
                                 .include "main.inc"
                                 
                                 ; bit 7 - Regulate PWM - bit sets every 1ms indicating that we can compare voltages and adjust PWM.
                                 .EQU	PWM_flag_regulatePWM = 7
                                 
                                 ; Convert ADC RAW voltage to real voltage
                                 Convert_VoltageADC_to_Volt:
                                 	#ifdef MOVINGAVERAGE
000137 e6e8                      		ldi ZL, LOW(M_AVERAGE_voltage_COUNTER)
000138 e0f0                      		ldi ZH, HIGH(M_AVERAGE_voltage_COUNTER)
000139 df2d                      		rcall moving_average
                                 	#endif
                                 	; Value is ready for converting to Volts (actually V*100 eg 1200 = 12.00V)
                                 	; The formula is: ADC * 64 / VOLT_DIV_CONST
00013a e006                      	ldi tmp, 6
                                 mult32:
00013b 0c33                      	lsl tmp2
00013c 1c44                      	rol tmp3
00013d 950a                      	dec tmp
00013e f7e1                      	brne mult32
                                 	; divide it by a constant
00013f 2c83                      	mov tmpL1, tmp2
000140 2c94                      	mov tmpH1, tmp3
000141 e107                      	ldi tmp, VOLT_DIV_CONST
000142 2ea0                      	mov tmpL2, tmp
000143 24bb                      	clr tmpH2
000144 df42                      	rcall div16u	; result in tmpH1:tmpL1 (actually only low byte)
000145 9280 0063                 	sts Voltage_Measured, tmpL1
000147 9290 0064                 	sts Voltage_Measured+1, tmpH1
                                 convert_V_exit:
000149 9508                      	ret
                                 
                                 ; Convert ADC RAW current to real current
                                 Convert_CurrentADC_to_Current:
                                 	#ifdef MOVINGAVERAGE
00014a e7e3                      		ldi ZL, LOW(M_AVERAGE_current_COUNTER)
00014b e0f0                      		ldi ZH, HIGH(M_AVERAGE_current_COUNTER)
00014c df1a                      		rcall moving_average
                                 	#endif
                                 	; Value is ready for converting to Current (actually C*10 eg 55 = 5.5A)
                                 	; ADC_Current_zero_RAW - reference for 0.0A
                                 	; The formula is: (ADC-ADC_Current_zero_RAW)*64/CURRENT_DIV_CONST
00014d 9080 0066                 	lds tmpL1, ADC_Current_zero_RAW
00014f 9090 0067                 	lds tmpH1, ADC_Current_zero_RAW+1
000151 1838                      	sub tmp2, tmpL1
000152 0849                      	sbc tmp3, tmpH1
000153 f410                      	brcc convert_C_notminus
000154 2c38                      	mov tmp2, tmpL1	; if minus, then 0
000155 2c49                      	mov tmp3, tmpH1	; if minus, then 0
                                 convert_C_notminus:
000156 e006                      	ldi tmp, 6
                                 mult64:
000157 0c33                      	lsl tmp2
000158 1c44                      	rol tmp3
000159 950a                      	dec tmp
00015a f7e1                      	brne mult64
                                 	; divide it by a constant
00015b 2c83                      	mov tmpL1, tmp2
00015c 2c94                      	mov tmpH1, tmp3
00015d ef02                      	ldi tmp, CURRENT_DIV_CONST
00015e 2ea0                      	mov tmpL2, tmp
00015f 24bb                      	clr tmpH2
000160 df26                      	rcall div16u	; result in tmpH1:tmpL1 (actually only low byte)
000161 9280 0065                 	sts Current_Measured, tmpL1
                                 convert_C_exit:
000163 9508                      	ret
                                 	
                                 ; The routine checks measured voltage and compare it to the desired voltage (setVolt_tmp)
                                 ; Need to see, how it is better to check voltage, by filtered RAW value or calculated V*10?
                                 Regulate_PWM:
                                 	; check flag PWM_flag_regulatePWM
000164 ff77                      	sbrs PWM_flags, PWM_flag_regulatePWM
000165 c00b                      	rjmp Regulate_PWM_exit
000166 777f                      	cbr PWM_flags, (1<<PWM_flag_regulatePWM)	; clear flag
000167 b51e                      	in tmp1, OCR1A	; read current PWM
                                 	; compare voltages
                                 	; TODO votage now is 2 byte value
000168 9100 0063                 	lds tmp, Voltage_Measured	
00016a 150c                      	cp tmp, setVolt_tmp
00016b f029                      	breq Regulate_PWM_exit	; No need to change
00016c f428                      	brsh Regulate_PWM_minus ; need to decrease PWM
                                 	; need to increase PWM
                                 	; check that we not at max already
00016d 3f1f                      	cpi tmp1, 255
00016e f011                      	breq Regulate_PWM_exit
00016f 9513                      	inc tmp1
                                 Regulate_PWM_update:
000170 bd1e                      	out OCR1A, tmp1
                                 Regulate_PWM_exit:
000171 9508                      	ret
                                 Regulate_PWM_minus:
                                 	; check that we not at min already
000172 3010                      	cpi tmp1, 0
000173 f3e9                      	breq Regulate_PWM_exit
000174 951a                      	dec tmp1
000175 cffa                      
                                 RESET:
000176 94f8                      	cli
                                 	;initialize constants
000177 2400                      	clr z0
000178 2411                      	clr z1
000179 9413                      	inc z1
                                 	
00017a 2766                      	clr Voltage_Set	; At the beginning it is always 0.
                                 	
00017b e800                      	ldi tmp, 1<<CLKPCE	
00017c bd06                      	out CLKPR, tmp		; enable clock change
00017d bc06                      	out CLKPR, z0		; prescaler 1
                                 
00017e e002                      	ldi tmp, high(RAMEND) 
00017f bf0e                      	out SPH,tmp				; Set Stack Pointer to top of RAM
000180 e50f                      	ldi tmp, low(RAMEND)
000181 bf0d                      	out SPL,tmp				; Set Stack Pointer to top of RAM
                                 
                                 	#ifdef DEBUG
                                 	#endif
                                 
000182 df6a                      	rcall EEPROM_restoreSettings
                                 
000183 de8b                      	rcall init_PWM	; Initialize FET controlling with PWM
                                 	#ifdef MOVINGAVERAGE
000184 dedc                      		rcall init_Moving_Average
                                 	#endif
000185 deb3                      	rcall init_ADC			; Initialize V and I measuring
000186 df1a                      	rcall init_Scheduler	; Initialize scheduler for smooth change to desired voltage
                                 
                                 
                                 	; this call should be the last before enabling interrupts and entering main loop
000187 df30                      	rcall Scheduler_start	
                                 
000188 9a36                      	sbi ADCSRA, ADSC
                                 	
000189 9478                      	sei
                                 	
                                 loop:
                                 	; wait for ADC complete
00018a 9936                      	sbic ADCSRA, ADSC
00018b cffe                      	rjmp loop
00018c de91                      	rcall ADC_Read
                                 
00018d dfd6                      	rcall Regulate_PWM
                                 	
00018e cffb                      	rjmp loop


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny85" register use summary:
x  :   0 y  :   0 z  :   6 r0 :  12 r1 :   4 r2 :   5 r3 :  27 r4 :  21 
r5 :   0 r6 :   0 r7 :   0 r8 :  14 r9 :  12 r10:  24 r11:  19 r12:   6 
r13:   3 r14:   3 r15:   0 r16:  95 r17:  11 r18:   0 r19:   0 r20:   0 
r21:   9 r22:   3 r23:   4 r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 
r29:   0 r30:   9 r31:   9 
Registers used: 20 out of 35 (57.1%)

"ATtiny85" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   4 add   :   4 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   1 brtc  :   1 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 cbi   :   5 cbr   :   1 clc   :   1 
clh   :   0 cli   :   5 cln   :   0 clr   :  16 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   0 cp    :   4 cpc   :   1 cpi   :   9 
cpse  :   4 dec   :  13 eor   :   3 icall :   0 ijmp  :   0 in    :   8 
inc   :   7 ld    :   3 ldd   :   0 ldi   :  48 lds   :   7 lpm   :   0 
lsl   :   3 lsr   :   3 mov   :  28 movw  :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  32 pop   :   5 push  :   5 rcall :  39 
ret   :  21 reti  :  17 rjmp  :  16 rol   :   6 ror   :   1 sbc   :   2 
sbci  :   0 sbi   :   8 sbic  :   4 sbis  :   0 sbiw  :   0 sbr   :   1 
sbrc  :   0 sbrs  :   2 sec   :   1 seh   :   0 sei   :   3 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   3 std   :   0 sts   :  10 sub   :   3 subi  :   0 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 47 out of 105 (44.8%)

"ATtiny85" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00031e    798      0    798    8192   9.7%
[.dseg] 0x000060 0x00007e      0     30     30     512   5.9%
[.eseg] 0x000005 0x000009      0      4      4     512   0.8%

Assembly complete, 0 errors, 0 warnings
